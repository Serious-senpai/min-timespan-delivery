name: Run algorithm

on: push

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: Compile source files
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get cached ALGLIB object files
        id: alglib-cache
        uses: actions/cache@v4
        with:
          key: ALGLIB-ubuntu-latest-${{ hashFiles('extern/alglib-cpp/**') }}
          path: build/*.o

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Compile ALGLIB
        if: ${{ steps.alglib-cache.outputs.cache-hit != 'true' }}
        run: scripts/build.sh alglib

      - name: Compile in profile mode
        run: scripts/build.sh profile-generate

      - name: Run in profile mode
        run: python scripts/in.py 50.40.4 | time -p build/main.exe

      - name: Compile in release mode
        run: scripts/build.sh profile-use

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: executable
          path: build/main.exe

  solve:
    name: Run algorithm
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix:
        problem: ["20.10.1", "20.10.2", "20.10.3", "20.10.4", "20.20.1", "20.20.2", "20.20.3", "20.20.4", "20.5.1", "20.5.2", "20.5.3", "20.5.4",
          "50.10.1", "50.10.2", "50.10.3", "50.10.4", "50.20.1", "50.20.2", "50.20.3", "50.20.4", "50.30.1", "50.30.2", "50.30.3", "50.30.4", "50.40.1", "50.40.2", "50.40.3", "50.40.4"]
        speed-type: [low]
        range-type: [low, high]
        config: [linear, non-linear, endurance, unlimited]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Download executable
        uses: actions/download-artifact@v4
        with:
          name: executable
          path: build/

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Initialize working space
        run: |
          mkdir result
          chmod +x build/main.exe

      - name: Run algorithm
        run: |
          exitcode=0
          set +e
          let begin=1
          let end=10

          report_error() {
            this_exitcode=$?

            if [ $this_exitcode -ne 0 ]
            then
              echo "::warning::Exit code $this_exitcode at run #$i"
              exitcode=1
            fi
          }

          for i in $(seq $begin $end)
          do
            echo "RUN #$i"
            python scripts/in.py ${{ matrix.problem }} \
              --speed-type ${{ matrix.speed-type }} \
              --range-type ${{ matrix.range-type }} \
              --config ${{ matrix.config }} \
              > input.txt
            report_error

            cat input.txt | build/main.exe > input2.txt
            report_error

            cat input2.txt | python scripts/out.py ${{ matrix.problem }} --url "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            report_error
          done

          exit $exitcode

      - name: Upload results
        uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: solution-${{ matrix.problem }}-${{ matrix.speed-type }}-${{ matrix.range-type }}-${{ matrix.config }}
          path: result/*

  compare-to-nonlinear:
    name: Evaluate using non-linear model
    runs-on: ubuntu-latest
    needs: solve
    strategy:
      fail-fast: false
      matrix:
        config: [linear, endurance, unlimited]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download results
        uses: actions/download-artifact@v4
        with:
          path: pre-result/
          pattern: solution-*-${{ matrix.config }}
          merge-multiple: true

      - name: Download executable
        uses: actions/download-artifact@v4
        with:
          name: executable
          path: build/

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Initialize working space
        run: |
          mkdir result
          chmod +x build/main.exe

      - name: Install jq
        run: sudo apt install jq -y

      - name: Evaluate solutions
        run: |
          for filename in $(ls pre-result | grep -P '(?<!-pretty)\.json$')
          do
            problem=$(cat 'pre-result/$filename' | jq -r '.problem')
            python scripts/evaluate.py 'pre-result/$filename' | build/main.exe | python scripts/out.py $problem
          done

      - name: Summarize results
        run: python scripts/summary.py

      - name: Upload summary table
        uses: actions/upload-artifact@v4
        with:
          name: compare-${{ matrix.config }}-to-non-linear-csv
          path: result/summary.csv

      - name: Upload summary and all results
        uses: actions/upload-artifact@v4
        with:
          name: compare-${{ matrix.config }}-to-non-linear
          path: result/*

  summary:
    name: Summarize results
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: solve

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download results
        uses: actions/download-artifact@v4
        with:
          path: result/
          pattern: solution-*
          merge-multiple: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Summarize results
        run: python scripts/summary.py

      - name: Upload summary table
        uses: actions/upload-artifact@v4
        with:
          name: summary-csv
          path: result/summary.csv

      - name: Upload summary and all results
        uses: actions/upload-artifact@v4
        with:
          name: summary
          path: result/*
